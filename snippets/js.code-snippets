{
  "JQUERY AJAX": {
    "scope": "javascript",
    "prefix": "jqajax",
    "body": [
      "$.ajax({",
      "\ttype: '${1:method}',",
      "\turl: '/${2:url}',",
      "\theaders: {",
      "\t\t'X-Requested-With': 'XMLHttpRequest',",
      "\t\t'Content-Type': 'application/json',",
      "\t},",
      "\tdata: {${3:data}},",
      "\tdataType: '${4:dataType}',",
      "\tsuccess: (res) => {",
      "\t\t${0://}",
      "\t}",
      "});"
    ],
    "description": "ash ajax snippets"
  },
  "FUNCTION SHORTHAND JS INLINE": {
    "scope": "typescript, javascript",
    "prefix": "fsi",
    "body": ["(${2:params}) => {", "\t${3:code}", "}"],
    "description": "function shorthand inline"
  },
  "IF ELSE SHORTHAND JS": {
    "scope": "typescript, javascript",
    "prefix": "ifj",
    "body": ["${1:condition} === ${2:value} ? ${3:if_true} : ${0:if_false};"],
    "description": "if else shorthand for js"
  },
  "FUNCTION SHORTHAND JS": {
    "scope": "typescript, javascript",
    "prefix": "fsl",
    "body": [
      "let ${1:nama_fungsi} = (${2:params}) => {",
      "\t${3:code}",
      "}",
      "${1:nama_fungsi}()"
    ],
    "description": "function shorthand"
  },
  "CONSOLE LOG OBJECT": {
    "scope": "javascript,typescript,typescriptreact,javascriptreact",
    "prefix": "_logs",
    "body": [
      "console.log('${1:msg}:::',",
      "\tJSON.stringify({",
      "\t\t${2:object}",
      "\t}, null, 2)",
      ")"
    ],
    "description": "console.log"
  },
  "CONSOLE LOG INLINE": {
    "scope": "javascript,typescript,typescriptreact,javascriptreact",
    "prefix": "_log",
    "body": ["console.log('${1:msg}:::', ${2});"],
    "description": "console.log"
  },
  "CONSOLE INFO": {
    "scope": "javascript,typescript",
    "prefix": "lin",
    "body": ["console.info(${1:msg})"],
    "description": "console.info"
  },
  "CONSOLE ERROR": {
    "scope": "javascript",
    "prefix": "ler",
    "body": ["console.error(${1:msg})"],
    "description": "console.error"
  },
  "CONSOLE WARN": {
    "scope": "javascript",
    "prefix": "lw",
    "body": ["console.warn(${1:msg})"],
    "description": "console.warn"
  },
  "CONSOLE TABLE": {
    "scope": "javascript",
    "prefix": "lt",
    "body": ["console.table(${1:msg})"],
    "description": "console.table"
  },
  "CONSOLE LOG RETURN FALSE": {
    "scope": "javascript",
    "prefix": "lg",
    "body": ["console.log(${1:code})", "return false"],
    "description": "console.log"
  },
  "SWALJS STANDARD": {
    "scope": "javascript",
    "prefix": "sw_standard",
    "body": [
      "Swal.fire({",
      "\type: '${1:error/warning/succes}',",
      "\ttitle: '${2:title}',",
      "\thtml: '${3:html}'",
      "})"
    ],
    "description": "swal standard"
  },
  "SWALJS CUSTOM BUTTON": {
    "scope": "javascript",
    "prefix": "sw_custom_button",
    "body": [
      "Swal.fire({",
      "\ttype: '${1:error/warning/succes}',",
      "\ttitle: '${2:title}',",
      "\thtml: '${3:html}',",
      "\tshowConfirmButton: '${4:false/true}',",
      "\tconfirmButtonText: '${5:text_tombol_confirm}',",
      "\tshowCancelButton: '${6:false/true}',",
      "\tcancelButtonText: '${7:text_tombol_cancel}'",
      "\ttimer: '${0:timer}'",
      "})"
    ],
    "description": "swal standard"
  },
  "SWALJS AJAX": {
    "scope": "javascript",
    "prefix": "swajax",
    "body": [
      "Swal.fire({",
      "\ticon: '${1:error/warning/success/question}',",
      "\ttitle: '${2:title}',",
      "\thtml: `<input type=\"text\" id=\"${3:id}\" class=\"swal2-input\">`,",
      "\tshowCancelButton: true,",
      "\tconfirmButtonText: 'Simpan',",
      "\tcancelButtonText: 'Tutup',",
      "\tallowOutsideClick: false,",
      "\tallowEnterKey: true,",
      "\tallowEscapeKey: true,",
      "})",
      ".then((result) => {",
      "\tif(result.value) {",
      "\t\t$.ajax({",
      "\t\t\turl: '${4:url}',",
      "\t\t\ttype: 'post',",
      "\t\t\tdata: {${5:data}},",
      "\t\t\tdataType: 'json',",
      "\t\t\tsuccess: res => {",
      "\t\t\t\tconsole.log(res)",
      "\t\t\t}",
      "\t\t})",
      "\t}",
      "})"
    ],
    "description": "swal ajax"
  },
  "SNIPPETS": {
    "scope": "snippets",
    "prefix": "snip",
    "body": [
      "\"${1:nama}\": {",
      "\t\"scope\": \"${2:php_js_html_dll}\",",
      "\t\"prefix\": \"${3:inisial}\",",
      "\t\"body\": [",
      "\t\t\t\"${0:body}\"",
      "\t\t]",
      "}"
    ],
    "description": "snippets for snippets hayoloh.."
  },
  "JS VOID": {
    "scope": "html",
    "prefix": "jvoid",
    "body": ["javascript:void(0)"],
    "description": "javascript:void(0)"
  },
  "MODULE EXPORTS": {
    "scope": "javascript",
    "prefix": "mx",
    "body": [
      "module.exports = {",
      "\tentry: {${1:entry}},",
      "\toutput: {${2:output}},",
      "\tmodule: {${3:module}},",
      "\tplugins: [${0:plugins}]",
      "}"
    ],
    "description": "module exports webpack"
  },
  "JQUERY GET": {
    "scope": "javascript",
    "prefix": "jqget",
    "body": ["$.get(${1:URL},${2:callback});"],
    "description": "jquery ajax get"
  },
  "TOAST": {
    "scope": "javascript",
    "prefix": "tst",
    "body": [
      "Toast.fire({",
      "\ticon: 'success',",
      "\ttitle: `${1:title}`,",
      "\t}).then((result) => {",
      "\t\tif (result.dismiss === Swal.DismissReason.timer) {",
      "\t\t\t${0://}",
      "\t\t}",
      "});"
    ],
    "description": "toast swal2"
  },
  "AXIOS GET": {
    "scope": "javascript",
    "prefix": "xget",
    "body": [
      "axios({",
      "\tmethod: '${1:post/get}',",
      "\turl: '/${2:url}',",
      "\theaders: { 'Content-Type': 'application/json' },",
      "\tdata: {${3:data}},",
      "}).then((res) => {",
      "\t${0://}",
      "});"
    ],
    "description": "axios get"
  },
  "REACTJS: FUNCTIONAL COMPONENTS (ARROW)": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "__rafceArrow",
    "body": [
      "const $TM_FILENAME_BASE = (${1:props}) => {",
      "return (",
      "\t\t<div>",
      "\t\t\t${2:{/* children */}}",
      "\t\t</div>",
      "\t);",
      "}\n",
      "export default $TM_FILENAME_BASE"
    ],
    "description": "React Hooks Functional Components (Arrow Function)"
  },
  "REACTJS: FUNCTIONAL COMPONENTS": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "__rafce",
    "body": [
      "export default function $TM_FILENAME_BASE (${1:props}) {",
      "return (",
      "\t\t<div>",
      "\t\t\t${2:{/* children */}}",
      "\t\t</div>",
      "\t);",
      "}"
    ],
    "description": "React Hooks Functional Components"
  },
  "REACTJS: USESTATE": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "__useState",
    "body": "const [${1:state}, ${1:state}Set] = useState$2('${3:initialState}')"
  },
  "REACTJS: USEIMMERREDUCER": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "__useImmerReducer",
    "body": [
      "/* useImmerReducer ==================================================== */",
      "const ${TM_FILENAME_BASE/(.*)/${1:/downcase}/}InitialValues = {",
      "\t${4:key}: '${5:value}'",
      "}",
      "const ${TM_FILENAME_BASE/(.*)/${1:/downcase}/}Reducer = (draft, action) => {",
      "\tswitch(action.type) {",
      "\t\tcase '${2:caseType}':",
      "\t\t\t// ${3:code}",
      "\t\t\treturn",
      "\t\t\tdefault:",
      "\t\t\treturn",
      "\t}",
      "}",
      "const [${6:state}, ${7:dispatch}] = useImmerReducer(${TM_FILENAME_BASE/(.*)/${1:/downcase}/}Reducer, ${TM_FILENAME_BASE/(.*)/${1:/downcase}/}InitialValues)",
      "/* /useImmerReducer =================================================== */"
    ]
  },
  "REACT: USEEFFECT": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "__useEffect",
    "body": ["useEffect(() => {", "\t${1:code}", "}, [])"]
  },
  "REACT: USEEFFECT WITH AXIOS": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "__useEffectAxios",
    "body": [
      "useEffect(() => {",
      "const source = axios.source",
      "\t(async () => {",
      "\t\tconst options = {",
      "\t\t\tdata: ${2:data}",
      "\t\t\tcancelToken: source.token()",
      "\t\t}",
      "\t\tawait axios.post(${1:url}, options)",
      "\t})()",
      "return () => source.cancel()",
      "}, [])"
    ]
  },
  "NEXT GET INITIAL PROPS": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "ngip",
    "body": [
      "$TM_FILENAME_BASE.getInitialProps = async ctx => {",
      "\t${0:code}",
      "}"
    ]
  }
}
